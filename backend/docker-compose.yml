services:
  backend:
    container_name: backend_api
    build: .
    restart: unless-stopped
    env_file: .env
    environment:
      API_PORT: ${API_PORT}
    ports:
      - "${API_PORT}:9090"
    depends_on:
      - postgres
    networks:
      - backend

  postgres:
    image: postgres:16
    container_name: backend_postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres
      - backend

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_PORT: ${PGADMIN_PORT}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - postgres
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy

networks:
  postgres:
    driver: bridge
  backend:
    driver: bridge

volumes:
  pgadmin: 
  postgres: